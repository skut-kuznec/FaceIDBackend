openapi: "3.0.1"
info:
  title: Face Recognition API
  description: This is the final project for GeekBrains course
  version: 1.0.0
  contact:
    email: no@name.com

tags:
- name: Image
  description: Operation about images
- name: Staff
  description: Operation with staff
- name: Thirdparty
  description: Some strange functions
- name: Timerecord
  description: Recording staff apperance timelines

paths:
  /staff/add:
    post:
      summary: Create new employee
      tags: 
        - Staff
      operationId: CreateEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/CreateEmployeeRequest"
      responses:
        200:
          description: employee has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEmployeeResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /staff/update:
    put:
      summary: Update employee
      tags: 
        - Staff
      operationId: UpdateEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/UpdateEmployeeRequest"
      responses:
        200:
          description: employee has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateEmployeeResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /staff/all:
    get:
      summary: Get all staff
      tags: 
        - Staff
      operationId: ListEmployees
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEmployeesResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /staff/delete:
    delete:
      summary: Delete employee
      tags: 
        - Staff
      operationId: DeleteEmployee
      parameters:
        - name: id
          in: query
          required: true
          x-go-name: ID
          schema:
            type: integer
            format: uint64
          description: Employee ID
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteEmployeeResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /staff/get:
    get:
      summary: Get employee
      tags: 
        - Staff
      operationId: GetEmployee
      parameters:
        - name: id
          in: query
          required: true
          x-go-name: ID
          schema:
            type: integer
            format: uint64
          description: Employee ID
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEmployeeResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /staff/recognize:
    post:
      summary: Recognize employee
      tags: 
        - Staff
      operationId: RecognizeEmployee
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecognizeEmployeeResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /image/upload:
    post:
      summary: Upload image on server
      tags: 
        - Image
      operationId: UploadImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadImageResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /images/file:
    get:
      summary: Download image from server
      tags: 
        - Image
      operationId: DownloadImage
      parameters:
        - name: id
          in: query
          required: true
          x-go-name: ID
          schema:
            type: integer
            format: uint64
          description: Image ID
      responses:
        200:
          description: success
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /images/data:
    get:
      summary: Get image description
      tags: 
        - Image
      operationId: GetImageDescription
      parameters:
        - name: id
          in: query
          required: true
          x-go-name: ID
          schema:
            type: integer
            format: uint64
          description: Image ID
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImageDescriptionResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /thirdparty/add:
    post:
      summary: Add new thirdparty link
      tags: 
        - Thirdparty
      operationId: AddThirdparty
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/AddThirdpartyRequest"
      responses:
        200:
          description: thirdparty has been added
          content:
            application/json:
              schema:
                type: string
                example: http://localhost:8080/api/thirdparty/check
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /thirdparty/all:
    get:
      summary: Get thirdparty list of links
      tags: 
        - Thirdparty
      operationId: ListThirdparty
      responses:
        200:
          description: thirdparty has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThirdpartyResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /timerecord/add:
    post:
      summary: Save timerecord event about staff
      tags:
        - Timerecord
      operationId: AddTimerecord
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/AddTimerecordRequest"
      responses:
        200:
          description: timerecord has been saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddTimerecordResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /timerecord/all:
    get:
      summary: Get list of all timerecord events
      tags:
        - Timerecord
      operationId: ListTimerecord
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTimerecordResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
  /timerecord/lastbyemployee:
    get:
      summary: Get last timerecord by employee
      tags: 
        - Timerecord
      operationId: LastTimerecordByEmploeeID
      parameters:
        - name: id
          in: query
          required: true
          x-go-name: ID
          schema:
            type: integer
            format: uint64
          description: Employee ID
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LastTimerecordByEmploeeIDResponse"
        500:
          description: any error (for mobile contract)
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Meta: 
      type: object
      additionalProperties: true
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    EmployeeBase:
      type: object
      required:
        - name
        - photo_id
        - meta
      properties:
        name:
          type: string
        photo_id:
          type: integer
          format: uint64
          x-go-name: PhotoID
        meta:
          $ref: "#/components/schemas/Meta"
    Employee:
      allOf:
        - $ref: '#/components/schemas/EmployeeBase'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: uint64
              x-go-name: ID
    Image:
      type: object
      required:
        - id
        - path
      properties:
        id:
          type: integer
          format: uint64
          x-go-name: ID
        path:
          type: string

    CreateEmployeeRequest:
      allOf:
        - $ref: '#/components/schemas/EmployeeBase'
    CreateEmployeeResponse:
      allOf:
        - $ref: '#/components/schemas/Employee'
    UpdateEmployeeRequest:
      allOf:
        - $ref: '#/components/schemas/Employee'
    UpdateEmployeeResponse:
      allOf:
        - $ref: '#/components/schemas/Employee'
    ListEmployeesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Employee'
    DeleteEmployeeResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    GetEmployeeResponse:
      allOf:
        - $ref: '#/components/schemas/Employee'
    RecognizeEmployeeResponse:
      allOf:
        - $ref: '#/components/schemas/Employee'
    UploadImageResponse:
        allOf:
        - $ref: '#/components/schemas/Image'
    GetImageDescriptionResponse:
        allOf:
        - $ref: '#/components/schemas/Image'
    AddThirdpartyRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          example: http://localhost:8080/api/thirdparty/check
    ListThirdpartyResponse:
      type: array
      items:
        type: string
        example: http://localhost:8080/api/thirdparty/check
    TimerecordTime:
      type: object
      required:
        - time
        - photo_id
      properties:
        time:
          type: string
          format: date-time
        photo_id:
          type: integer
          format: uint64
    TimerecordBase:
      type: object
      required:
        - employee
        - entry_time
      properties:
        employee:
          type: integer
          format: int64
        entry_time:
          $ref: "#/components/schemas/TimerecordTime"
        exit_time:
          $ref: "#/components/schemas/TimerecordTime"
    Timerecord:
      allOf:
        - $ref: '#/components/schemas/TimerecordBase'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              x-go-name: ID
    AddTimerecordRequest:
      allOf:
        - $ref: '#/components/schemas/TimerecordBase'
    AddTimerecordResponse:
      allOf:
        - $ref: '#/components/schemas/Timerecord'
    ListTimerecordResponse:
      type: array
      items:
        $ref: '#/components/schemas/Timerecord'
    LastTimerecordByEmploeeIDResponse:
      allOf:
        - $ref: '#/components/schemas/Timerecord'
