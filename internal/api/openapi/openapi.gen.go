// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Any defines model for Any.
type Any = interface{}

// CreateEmployeeRequest defines model for CreateEmployeeRequest.
type CreateEmployeeRequest struct {
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// CreateEmployeeResponse defines model for CreateEmployeeResponse.
type CreateEmployeeResponse struct {
	ID      int64  `json:"id"`
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// DeleteEmployeeResponse defines model for DeleteEmployeeResponse.
type DeleteEmployeeResponse struct {
	Message string `json:"message"`
}

// Employee defines model for Employee.
type Employee struct {
	ID      int64  `json:"id"`
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// EmployeeBase defines model for EmployeeBase.
type EmployeeBase struct {
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// GetEmployeeResponse defines model for GetEmployeeResponse.
type GetEmployeeResponse struct {
	ID      int64  `json:"id"`
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// ListEmployeesResponse defines model for ListEmployeesResponse.
type ListEmployeesResponse = []Employee

// RecognizeEmployeeResponse defines model for RecognizeEmployeeResponse.
type RecognizeEmployeeResponse struct {
	ID      int64  `json:"id"`
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// UpdateEmployeeRequest defines model for UpdateEmployeeRequest.
type UpdateEmployeeRequest struct {
	ID      int64  `json:"id"`
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// UpdateEmployeeResponse defines model for UpdateEmployeeResponse.
type UpdateEmployeeResponse struct {
	ID      int64  `json:"id"`
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// CreateEmployeeJSONBody defines parameters for CreateEmployee.
type CreateEmployeeJSONBody = CreateEmployeeRequest

// DeleteEmployeeParams defines parameters for DeleteEmployee.
type DeleteEmployeeParams struct {
	// Employee ID
	ID uint64 `form:"id" json:"id"`
}

// GetEmployeeParams defines parameters for GetEmployee.
type GetEmployeeParams struct {
	// Employee ID
	ID uint64 `form:"id" json:"id"`
}

// UpdateEmployeeJSONBody defines parameters for UpdateEmployee.
type UpdateEmployeeJSONBody = UpdateEmployeeRequest

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = CreateEmployeeJSONBody

// UpdateEmployeeJSONRequestBody defines body for UpdateEmployee for application/json ContentType.
type UpdateEmployeeJSONRequestBody = UpdateEmployeeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new employee
	// (POST /staff/add)
	CreateEmployee(c *gin.Context)
	// Get all staff
	// (GET /staff/all)
	ListEmployees(c *gin.Context)
	// Delete employee
	// (DELETE /staff/delete)
	DeleteEmployee(c *gin.Context, params DeleteEmployeeParams)
	// Get employee
	// (GET /staff/get)
	GetEmployee(c *gin.Context, params GetEmployeeParams)
	// Recognize employee
	// (POST /staff/recognize)
	RecognizeEmployee(c *gin.Context)
	// Update employee
	// (PUT /staff/update)
	UpdateEmployee(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateEmployee(c)
}

// ListEmployees operation middleware
func (siw *ServerInterfaceWrapper) ListEmployees(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListEmployees(c)
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEmployeeParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteEmployee(c, params)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeeParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetEmployee(c, params)
}

// RecognizeEmployee operation middleware
func (siw *ServerInterfaceWrapper) RecognizeEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RecognizeEmployee(c)
}

// UpdateEmployee operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateEmployee(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/staff/add", wrapper.CreateEmployee)

	router.GET(options.BaseURL+"/staff/all", wrapper.ListEmployees)

	router.DELETE(options.BaseURL+"/staff/delete", wrapper.DeleteEmployee)

	router.GET(options.BaseURL+"/staff/get", wrapper.GetEmployee)

	router.POST(options.BaseURL+"/staff/recognize", wrapper.RecognizeEmployee)

	router.PUT(options.BaseURL+"/staff/update", wrapper.UpdateEmployee)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW/jNhD9K8S0hxZQbG+/Djq1aYogQIEtdtPTwihoaSRzK36EHHXrBvrvxVCWbMV0",
	"km7tYoNeEpniDN/MPM483UNhtbMGDQXI7yEUa9QyPv5gNpDfdxn86FES/qRdYzeIb/CuxUC8QzbN6wry",
	"d/fwuccKcvhsvvM237qaD4aXMiB0y4TD4KwJ+M899t6usMG0N+etQ08KYzwaQ5B1fEEbh5BDIK9MDV2X",
	"gce7VnksIX83blxmw0a7eo8FQZfBePRHhp89RKVK/ltZryVBDsrQd9/AeLAyhDV6yODPi9peGKl59ebq",
	"ALMqE3CXe4Dj8YmckOT/jwXAPOgy6M8+yF0Gbm3J/vYxcfzClolg4us9x1mPM1kP760/jAuH5cNKH7i4",
	"RjoVFX9WYfQV9p0pQh2eSvTO14hSei9j9t9gYWuj/jrZrfnVlae41Gln/wYa10iZyrJ1YQ3JIsJCLVUD",
	"ORj7PdNjVljNeSkxFF45UtZADrdrFYQKgtYoKmVkI5y3XGdRWS+uEX+/9FKZIArb+sAcI0UNJxoy+AN9",
	"6N28mi1mC/ZuHRrpFOTw9Wwxe8WclLSOhZwHklU1l2XkvbN98piDksHclJA/6HPQkxwDXdpyM4SHps+6",
	"c40qoun8fWAUQy9+ijXp7txN7xT5FuNCX5kYwVeLxdlAbAkQUUxLhNs9Yi2DWCEaUUTbkvP97Qkh9Z0h",
	"gUCajYj9QXzBrNB2pRoUfKaXBX0Zm0RotZZ+M9ZQGPwgcFdIknXgTvWWSQBLNhkI0TSMrMYEHybtAc5Y",
	"jnQfSuQitEWBoWqbTzT710hCNo2IuX0072VUAQxr9zTN/lQnxLvspUZCH2KDmuIc9ombK+CGBDncteg3",
	"MExCiINpesWyveyMo7A9Mgu7w6G+PCMnjsikF0iKPpLnXcftPUxex73B/79jQ0r0vND+8Cwe+EE/HZ/W",
	"BxLr0YGt24aUk57mXNqLUvZCehf9VJBWqsEJD1bKyMifJxXqdpSfiQjHheULpMMYzPNI0UbZGovVJggx",
	"VbVnkm9pHf4fy7cj+v1Z8q1P4qcq3/rIHqVDN6497PqvBzoIubItCaVlHYXb0KT5d/ymP2b3QdF6FC9b",
	"q/7gQ6u3VqMI5KWpUVStKXh977TbtVeeO84mYczM96UydX+akI4xmAIFKY2NMvu4b5VGHw0Cf3H9HQAA",
	"//9mungABBIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
