// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// AddThirdpartyRequest defines model for AddThirdpartyRequest.
type AddThirdpartyRequest struct {
	Url string `json:"url"`
}

// AddTimerecordRequest defines model for AddTimerecordRequest.
type AddTimerecordRequest struct {
	Employee  int64           `json:"employee"`
	EntryTime TimerecordTime  `json:"entry_time"`
	ExitTime  *TimerecordTime `json:"exit_time,omitempty"`
}

// AddTimerecordResponse defines model for AddTimerecordResponse.
type AddTimerecordResponse struct {
	Employee  int64           `json:"employee"`
	EntryTime TimerecordTime  `json:"entry_time"`
	ExitTime  *TimerecordTime `json:"exit_time,omitempty"`
	ID        int64           `json:"id"`
}

// CreateEmployeeRequest defines model for CreateEmployeeRequest.
type CreateEmployeeRequest struct {
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// CreateEmployeeResponse defines model for CreateEmployeeResponse.
type CreateEmployeeResponse struct {
	ID      uint64 `json:"id"`
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// DeleteEmployeeResponse defines model for DeleteEmployeeResponse.
type DeleteEmployeeResponse struct {
	Message string `json:"message"`
}

// Employee defines model for Employee.
type Employee struct {
	ID      uint64 `json:"id"`
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// EmployeeBase defines model for EmployeeBase.
type EmployeeBase struct {
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// GetEmployeeResponse defines model for GetEmployeeResponse.
type GetEmployeeResponse struct {
	ID      uint64 `json:"id"`
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// GetImageDescriptionResponse defines model for GetImageDescriptionResponse.
type GetImageDescriptionResponse struct {
	ID   uint64 `json:"id"`
	Path string `json:"path"`
}

// Image defines model for Image.
type Image struct {
	ID   uint64 `json:"id"`
	Path string `json:"path"`
}

// LastTimerecordByEmploeeIDResponse defines model for LastTimerecordByEmploeeIDResponse.
type LastTimerecordByEmploeeIDResponse struct {
	Employee  int64           `json:"employee"`
	EntryTime TimerecordTime  `json:"entry_time"`
	ExitTime  *TimerecordTime `json:"exit_time,omitempty"`
	ID        int64           `json:"id"`
}

// ListEmployeesResponse defines model for ListEmployeesResponse.
type ListEmployeesResponse = []Employee

// ListThirdpartyResponse defines model for ListThirdpartyResponse.
type ListThirdpartyResponse = []string

// ListTimerecordResponse defines model for ListTimerecordResponse.
type ListTimerecordResponse = []Timerecord

// Meta defines model for Meta.
type Meta struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RecognizeEmployeeResponse defines model for RecognizeEmployeeResponse.
type RecognizeEmployeeResponse struct {
	ID      uint64 `json:"id"`
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// Timerecord defines model for Timerecord.
type Timerecord struct {
	Employee  int64           `json:"employee"`
	EntryTime TimerecordTime  `json:"entry_time"`
	ExitTime  *TimerecordTime `json:"exit_time,omitempty"`
	ID        int64           `json:"id"`
}

// TimerecordBase defines model for TimerecordBase.
type TimerecordBase struct {
	Employee  int64           `json:"employee"`
	EntryTime TimerecordTime  `json:"entry_time"`
	ExitTime  *TimerecordTime `json:"exit_time,omitempty"`
}

// TimerecordTime defines model for TimerecordTime.
type TimerecordTime struct {
	PhotoId uint64    `json:"photo_id"`
	Time    time.Time `json:"time"`
}

// UpdateEmployeeRequest defines model for UpdateEmployeeRequest.
type UpdateEmployeeRequest struct {
	ID      uint64 `json:"id"`
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// UpdateEmployeeResponse defines model for UpdateEmployeeResponse.
type UpdateEmployeeResponse struct {
	ID      uint64 `json:"id"`
	Meta    Meta   `json:"meta"`
	Name    string `json:"name"`
	PhotoID uint64 `json:"photo_id"`
}

// UploadImageResponse defines model for UploadImageResponse.
type UploadImageResponse struct {
	ID   uint64 `json:"id"`
	Path string `json:"path"`
}

// GetImageDescriptionParams defines parameters for GetImageDescription.
type GetImageDescriptionParams struct {
	// Image ID
	ID uint64 `form:"id" json:"id"`
}

// DownloadImageParams defines parameters for DownloadImage.
type DownloadImageParams struct {
	// Image ID
	ID uint64 `form:"id" json:"id"`
}

// CreateEmployeeJSONBody defines parameters for CreateEmployee.
type CreateEmployeeJSONBody = CreateEmployeeRequest

// DeleteEmployeeParams defines parameters for DeleteEmployee.
type DeleteEmployeeParams struct {
	// Employee ID
	ID uint64 `form:"id" json:"id"`
}

// GetEmployeeParams defines parameters for GetEmployee.
type GetEmployeeParams struct {
	// Employee ID
	ID uint64 `form:"id" json:"id"`
}

// UpdateEmployeeJSONBody defines parameters for UpdateEmployee.
type UpdateEmployeeJSONBody = UpdateEmployeeRequest

// AddThirdpartyJSONBody defines parameters for AddThirdparty.
type AddThirdpartyJSONBody = AddThirdpartyRequest

// AddTimerecordJSONBody defines parameters for AddTimerecord.
type AddTimerecordJSONBody = AddTimerecordRequest

// LastTimerecordByEmploeeIDParams defines parameters for LastTimerecordByEmploeeID.
type LastTimerecordByEmploeeIDParams struct {
	// Employee ID
	ID uint64 `form:"id" json:"id"`
}

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = CreateEmployeeJSONBody

// UpdateEmployeeJSONRequestBody defines body for UpdateEmployee for application/json ContentType.
type UpdateEmployeeJSONRequestBody = UpdateEmployeeJSONBody

// AddThirdpartyJSONRequestBody defines body for AddThirdparty for application/json ContentType.
type AddThirdpartyJSONRequestBody = AddThirdpartyJSONBody

// AddTimerecordJSONRequestBody defines body for AddTimerecord for application/json ContentType.
type AddTimerecordJSONRequestBody = AddTimerecordJSONBody

// Getter for additional properties for Meta. Returns the specified
// element and whether it was found
func (a Meta) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Meta
func (a *Meta) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Meta to handle AdditionalProperties
func (a *Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Meta to handle AdditionalProperties
func (a Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload image on server
	// (POST /image/upload)
	UploadImage(c *gin.Context)
	// Get image description
	// (GET /images/data)
	GetImageDescription(c *gin.Context, params GetImageDescriptionParams)
	// Download image from server
	// (GET /images/file)
	DownloadImage(c *gin.Context, params DownloadImageParams)
	// Create new employee
	// (POST /staff/add)
	CreateEmployee(c *gin.Context)
	// Get all staff
	// (GET /staff/all)
	ListEmployees(c *gin.Context)
	// Delete employee
	// (DELETE /staff/delete)
	DeleteEmployee(c *gin.Context, params DeleteEmployeeParams)
	// Get employee
	// (GET /staff/get)
	GetEmployee(c *gin.Context, params GetEmployeeParams)
	// Recognize employee
	// (POST /staff/recognize)
	RecognizeEmployee(c *gin.Context)
	// Update employee
	// (PUT /staff/update)
	UpdateEmployee(c *gin.Context)
	// Add new thirdparty link
	// (POST /thirdparty/add)
	AddThirdparty(c *gin.Context)
	// Get thirdparty list of links
	// (GET /thirdparty/all)
	ListThirdparty(c *gin.Context)
	// Save timerecord event about staff
	// (POST /timerecord/add)
	AddTimerecord(c *gin.Context)
	// Get list of all timerecord events
	// (GET /timerecord/all)
	ListTimerecord(c *gin.Context)
	// Get last timerecord by employee
	// (GET /timerecord/lastbyemployee)
	LastTimerecordByEmploeeID(c *gin.Context, params LastTimerecordByEmploeeIDParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// UploadImage operation middleware
func (siw *ServerInterfaceWrapper) UploadImage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UploadImage(c)
}

// GetImageDescription operation middleware
func (siw *ServerInterfaceWrapper) GetImageDescription(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetImageDescriptionParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetImageDescription(c, params)
}

// DownloadImage operation middleware
func (siw *ServerInterfaceWrapper) DownloadImage(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DownloadImageParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DownloadImage(c, params)
}

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateEmployee(c)
}

// ListEmployees operation middleware
func (siw *ServerInterfaceWrapper) ListEmployees(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListEmployees(c)
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEmployeeParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteEmployee(c, params)
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeeParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetEmployee(c, params)
}

// RecognizeEmployee operation middleware
func (siw *ServerInterfaceWrapper) RecognizeEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RecognizeEmployee(c)
}

// UpdateEmployee operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateEmployee(c)
}

// AddThirdparty operation middleware
func (siw *ServerInterfaceWrapper) AddThirdparty(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddThirdparty(c)
}

// ListThirdparty operation middleware
func (siw *ServerInterfaceWrapper) ListThirdparty(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListThirdparty(c)
}

// AddTimerecord operation middleware
func (siw *ServerInterfaceWrapper) AddTimerecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddTimerecord(c)
}

// ListTimerecord operation middleware
func (siw *ServerInterfaceWrapper) ListTimerecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListTimerecord(c)
}

// LastTimerecordByEmploeeID operation middleware
func (siw *ServerInterfaceWrapper) LastTimerecordByEmploeeID(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LastTimerecordByEmploeeIDParams

	// ------------- Required query parameter "id" -------------
	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.ID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.LastTimerecordByEmploeeID(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/image/upload", wrapper.UploadImage)

	router.GET(options.BaseURL+"/images/data", wrapper.GetImageDescription)

	router.GET(options.BaseURL+"/images/file", wrapper.DownloadImage)

	router.POST(options.BaseURL+"/staff/add", wrapper.CreateEmployee)

	router.GET(options.BaseURL+"/staff/all", wrapper.ListEmployees)

	router.DELETE(options.BaseURL+"/staff/delete", wrapper.DeleteEmployee)

	router.GET(options.BaseURL+"/staff/get", wrapper.GetEmployee)

	router.POST(options.BaseURL+"/staff/recognize", wrapper.RecognizeEmployee)

	router.PUT(options.BaseURL+"/staff/update", wrapper.UpdateEmployee)

	router.POST(options.BaseURL+"/thirdparty/add", wrapper.AddThirdparty)

	router.GET(options.BaseURL+"/thirdparty/all", wrapper.ListThirdparty)

	router.POST(options.BaseURL+"/timerecord/add", wrapper.AddTimerecord)

	router.GET(options.BaseURL+"/timerecord/all", wrapper.ListTimerecord)

	router.GET(options.BaseURL+"/timerecord/lastbyemployee", wrapper.LastTimerecordByEmploeeID)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
