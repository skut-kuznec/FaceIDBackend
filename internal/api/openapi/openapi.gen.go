// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Any defines model for Any.
type Any = interface{}

// CreateEmployeeRequest defines model for CreateEmployeeRequest.
type CreateEmployeeRequest struct {
	Meta    Any    `json:"meta"`
	Name    string `json:"name"`
	PhotoID int64  `json:"photo_id"`
}

// CreateEmployeeResponse defines model for CreateEmployeeResponse.
type CreateEmployeeResponse struct {
	ID int64 `json:"id"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// CreateEmployeeJSONBody defines parameters for CreateEmployee.
type CreateEmployeeJSONBody = CreateEmployeeRequest

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = CreateEmployeeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new employee
	// (POST /stuff/add)
	CreateEmployee(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateEmployee(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/stuff/add", wrapper.CreateEmployee)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUTW/TTBD+K6t53wNIbpLydfAJChXqCdT2hiq0WY/jLdmd7eyYYkX+72jWSb8ShITg",
	"lGQ8z8fMPPEGHIVEEaNkqDeQXYfBlq/v4gD1ZqzgPaMVPA1pTQPiOd70mEU7ElNCFo+lP6BY/fyfsYUa",
	"/pvfM8+3tHPlHCuINqC2ypAQasjCPq70QepI6Ktv9GFLHKxADT7Km1dQ7bp9FFwhQwU/jlZ0NHHBZ0We",
	"fYBxrIDxpveMDdRfJqkHxNXk8+qOjpbX6AQOzJkTxYz7g/6JvQPOfHPQxSkz8b4o7spPdjbuUWjJx5a0",
	"2VEU68qxMFi/hhoivVVPM0dB5RrMjn0STxFquOx8Nj4b6dC0Ptq1SUxKa1pi8xHx2wlbH7Nx1HPWxYqX",
	"tapDBd+R80RzPFvMFspOCaNNHmp4OVvMjvUQVroy0DxL37Zz25RtJpoipSNbNXPWQP3kIjDtD7OcUDPs",
	"xsNYgDaltXcFOr/O6mIX5t9l8nC8x8fnEu6xFKZQlAleLBb/zMQ2e8XF4xPhtsd0NpslYjSuYBvd9+u/",
	"aGkK4gEHNg6mxNE801QEWvo1GtVk6+R5yWTuQ7A83N3QRLw1eH9Isausf4ILsW0LV0VlW9s8kfu0i4Sx",
	"S+rF+GBXmGH3FoEz/Q1j9WvcrZfO5KJ0h5qE91EXFNBkYRtXaNo+Oq0/ULvs2HOyLMMB8Dk64sbH1aRm",
	"bFIP0aERH3Dt40Pflz4gF0CG8Wr8GQAA///+93z2igUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
