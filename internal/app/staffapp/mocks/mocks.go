// Code generated by MockGen. DO NOT EDIT.
// Source: staff_app.go

// Package mock_staffapp is a generated GoMock package.
package mock_staffapp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/smart48ru/FaceIDApp/internal/domain"
)

// MockStaffRepo is a mock of StaffRepo interface.
type MockStaffRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStaffRepoMockRecorder
}

// MockStaffRepoMockRecorder is the mock recorder for MockStaffRepo.
type MockStaffRepoMockRecorder struct {
	mock *MockStaffRepo
}

// NewMockStaffRepo creates a new mock instance.
func NewMockStaffRepo(ctrl *gomock.Controller) *MockStaffRepo {
	mock := &MockStaffRepo{ctrl: ctrl}
	mock.recorder = &MockStaffRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaffRepo) EXPECT() *MockStaffRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStaffRepo) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStaffRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStaffRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockStaffRepo) Get(ctx context.Context, id uint64) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStaffRepoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStaffRepo)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockStaffRepo) List(ctx context.Context) ([]domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStaffRepoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStaffRepo)(nil).List), ctx)
}

// Save mocks base method.
func (m *MockStaffRepo) Save(ctx context.Context, u domain.Employee) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, u)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStaffRepoMockRecorder) Save(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStaffRepo)(nil).Save), ctx, u)
}

// Update mocks base method.
func (m *MockStaffRepo) Update(ctx context.Context, u domain.Employee) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStaffRepoMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStaffRepo)(nil).Update), ctx, u)
}
